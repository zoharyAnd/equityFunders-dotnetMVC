// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using cFunding.Data;

namespace cFunding.Migrations
{
    [DbContext(typeof(AppliContext))]
    partial class AppliContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("cFunding.Models.answer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("answerdate");

                    b.Property<string>("answermessage");

                    b.Property<int?>("fkquestionid");

                    b.Property<int?>("fkuserid");

                    b.Property<bool>("validatedAnswer");

                    b.HasKey("id");

                    b.HasIndex("fkquestionid");

                    b.HasIndex("fkuserid");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("cFunding.Models.category", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("categoryname");

                    b.HasKey("id");

                    b.ToTable("categories");
                });

            modelBuilder.Entity("cFunding.Models.contactus", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("fkuserid");

                    b.Property<string>("mailmessage");

                    b.Property<string>("mailsubject");

                    b.Property<string>("senderemail");

                    b.Property<string>("sendername");

                    b.HasKey("id");

                    b.HasIndex("fkuserid");

                    b.ToTable("contactsus");
                });

            modelBuilder.Entity("cFunding.Models.favorite", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("fkprojectid");

                    b.Property<int?>("fkuserid");

                    b.HasKey("id");

                    b.HasIndex("fkprojectid");

                    b.HasIndex("fkuserid");

                    b.ToTable("favorites");
                });

            modelBuilder.Entity("cFunding.Models.project", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("fkcategoryid");

                    b.Property<int?>("fkuserid");

                    b.Property<int>("nbsharenonvoting");

                    b.Property<int>("nbshareordinary");

                    b.Property<int>("nbsharepreferencial");

                    b.Property<int>("nbshareredeemable");

                    b.Property<double>("projectamountraised");

                    b.Property<double>("projectamounttoraise");

                    b.Property<DateTimeOffset>("projectclosingdate");

                    b.Property<DateTimeOffset>("projectcreationdate");

                    b.Property<string>("projectdescription");

                    b.Property<string>("projectimage1");

                    b.Property<string>("projectimage2");

                    b.Property<string>("projectimage3");

                    b.Property<string>("projectimage4");

                    b.Property<string>("projectname");

                    b.Property<bool>("validatedProject");

                    b.HasKey("id");

                    b.HasIndex("fkcategoryid");

                    b.HasIndex("fkuserid");

                    b.ToTable("projects");
                });

            modelBuilder.Entity("cFunding.Models.question", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("fkuserid");

                    b.Property<DateTimeOffset>("questiondate");

                    b.Property<string>("questionmessage");

                    b.Property<bool>("validatedQuestion");

                    b.HasKey("id");

                    b.HasIndex("fkuserid");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("cFunding.Models.transaction", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("accountemail");

                    b.Property<double>("amount");

                    b.Property<int?>("fkprojectid");

                    b.Property<int?>("fkuserid");

                    b.Property<DateTimeOffset>("transactiondate");

                    b.HasKey("id");

                    b.HasIndex("fkprojectid");

                    b.HasIndex("fkuserid");

                    b.ToTable("transactions");
                });

            modelBuilder.Entity("cFunding.Models.user", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("additionalnonvoting");

                    b.Property<string>("additionalordinary");

                    b.Property<string>("additionalpreferencial");

                    b.Property<string>("additionalredeemable");

                    b.Property<string>("companydescription");

                    b.Property<string>("companylogo");

                    b.Property<string>("companyname");

                    b.Property<string>("descnonvoting");

                    b.Property<string>("descordinary");

                    b.Property<string>("descpreferencial");

                    b.Property<string>("descredeemable");

                    b.Property<bool>("isadmin");

                    b.Property<int>("nbsharenonvoting");

                    b.Property<int>("nbshareordinary");

                    b.Property<int>("nbsharepreferencial");

                    b.Property<int>("nbshareredeemable");

                    b.Property<double>("sharevaluenonvoting");

                    b.Property<double>("sharevalueordinary");

                    b.Property<double>("sharevaluepreferencial");

                    b.Property<double>("sharevalueredeemable");

                    b.Property<string>("useraddress");

                    b.Property<double>("userassets");

                    b.Property<string>("usercountry");

                    b.Property<DateTimeOffset>("userdob");

                    b.Property<string>("useremail");

                    b.Property<string>("userfname");

                    b.Property<string>("userlname");

                    b.Property<string>("username");

                    b.Property<string>("userpassword");

                    b.Property<string>("userphoto");

                    b.Property<bool>("validatedUser");

                    b.HasKey("id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("cFunding.Models.answer", b =>
                {
                    b.HasOne("cFunding.Models.question", "fkquestion")
                        .WithMany()
                        .HasForeignKey("fkquestionid");

                    b.HasOne("cFunding.Models.user", "fkuser")
                        .WithMany()
                        .HasForeignKey("fkuserid");
                });

            modelBuilder.Entity("cFunding.Models.contactus", b =>
                {
                    b.HasOne("cFunding.Models.user", "fkuser")
                        .WithMany()
                        .HasForeignKey("fkuserid");
                });

            modelBuilder.Entity("cFunding.Models.favorite", b =>
                {
                    b.HasOne("cFunding.Models.project", "fkproject")
                        .WithMany()
                        .HasForeignKey("fkprojectid");

                    b.HasOne("cFunding.Models.user", "fkuser")
                        .WithMany()
                        .HasForeignKey("fkuserid");
                });

            modelBuilder.Entity("cFunding.Models.project", b =>
                {
                    b.HasOne("cFunding.Models.category", "fkcategory")
                        .WithMany()
                        .HasForeignKey("fkcategoryid");

                    b.HasOne("cFunding.Models.user", "fkuser")
                        .WithMany()
                        .HasForeignKey("fkuserid");
                });

            modelBuilder.Entity("cFunding.Models.question", b =>
                {
                    b.HasOne("cFunding.Models.user", "fkuser")
                        .WithMany()
                        .HasForeignKey("fkuserid");
                });

            modelBuilder.Entity("cFunding.Models.transaction", b =>
                {
                    b.HasOne("cFunding.Models.project", "fkproject")
                        .WithMany()
                        .HasForeignKey("fkprojectid");

                    b.HasOne("cFunding.Models.user", "fkuser")
                        .WithMany()
                        .HasForeignKey("fkuserid");
                });
#pragma warning restore 612, 618
        }
    }
}
